import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  updateDoc,
  doc,
  deleteDoc
} from "firebase/firestore";
import * as XLSX from "xlsx";

// ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
const departments = ["Sales", "Warehouse", "Production", "QC", "Account"];
const statusOptions = {
  Warehouse: ["‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏¥‡∏Å", "Pending", "‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à"],
  Production: ["‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï", "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏", "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à"],
  QC: {
    qc_inspection: ["‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à (‡∏£‡∏≠‡∏õ‡∏£‡∏±‡∏ö)", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à (Hold)", "‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"],
    qc_coa: ["‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°", "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß"]
  },
  Account: ["Invoice ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å", "Invoice ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß"]
};

export default function Home() {
  const [jobs, setJobs] = useState([]);

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const querySnapshot = await getDocs(collection(db, "production_workflow"));
    const data = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    setJobs(data);
    console.log("üî• jobs:", data);
  };

  const handleStatusChange = async (job, field, value) => {
    const jobRef = doc(db, "production_workflow", job.id);
    const newStatus = { ...job.status, [field]: value };
    let nextStep = job.currentStep;

    // Logic ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô currentStep ‡∏ï‡∏≤‡∏° workflow ‡πÉ‡∏´‡∏°‡πà
    if (job.currentStep === "Warehouse" && newStatus.warehouse === "‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à") {
      nextStep = "Production";
    }

    if (job.currentStep === "Production") {
      if (newStatus.production === "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à") {
        nextStep = "QC";
      } else if (newStatus.production === "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à") {
        nextStep = "Account";
      } else {
        nextStep = "Production"; // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      }
    }

    if (
      job.currentStep === "QC" &&
      newStatus.qc_inspection === "‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" &&
      newStatus.qc_coa === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß"
    ) {
      nextStep = "Production"; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Production
    }

    if (job.currentStep === "Account") {
      if (newStatus.account === "Invoice ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß") {
        newStatus.complete = true;
        // nextStep ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà Account ‡∏´‡∏£‡∏∑‡∏≠ mark ‡∏à‡∏ö‡∏á‡∏≤‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ
      } else {
        nextStep = "Account"; // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      }
    }

    await updateDoc(jobRef, {
      status: newStatus,
      currentStep: nextStep
    });

    fetchJobs();
  };

  const exportToExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(jobs);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Jobs");
    XLSX.writeFile(workbook, "jobs_export.xlsx");
  };

  const handleDelete = async (id) => {
    await deleteDoc(doc(db, "production_workflow", id));
    fetchJobs();
  };

  return (
    <div style={{ padding: 20 }}>
      <h2>üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î</h2>
      <button onClick={exportToExcel}>üì§ Export Excel</button>

      <table border="1" cellPadding="5" style={{ marginTop: 20, width: "100%", borderCollapse: "collapse" }}>
        <thead style={{ backgroundColor: "#f3f4f6" }}>
          <tr>
            <th>Batch No</th>
            <th>Product</th>
            <th>Current Step</th>
            <th>Update Status</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°</th>
            <th>Customer</th>
            <th>Volume</th>
            <th>Delivery Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {jobs.map((job) => {
            const current = job.currentStep;
            const status = job.status || {};
            return (
              <tr key={job.id}>
                <td>{job.batch_no || "N/A"}</td>
                <td>{job.product_name || job.Product || "-"}</td>
                <td>{current || "-"}</td>

                <td>
                  {current === "QC" ? (
                    <>
                      <div>
                        ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏•‡πà‡∏≠‡∏¢:{" "}
                        <select
                          value={status.qc_inspection || ""}
                          onChange={(e) =>
                            handleStatusChange(job, "qc_inspection", e.target.value)
                          }
                        >
                          <option value="">--‡πÄ‡∏•‡∏∑‡∏≠‡∏Å--</option>
                          {statusOptions.QC.qc_inspection.map((opt) => (
                            <option key={opt}>{opt}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        COA & Sample:{" "}
                        <select
                          value={status.qc_coa || ""}
                          onChange={(e) =>
                            handleStatusChange(job, "qc_coa", e.target.value)
                          }
                        >
                          <option value="">--‡πÄ‡∏•‡∏∑‡∏≠‡∏Å--</option>
                          {statusOptions.QC.qc_coa.map((opt) => (
                            <option key={opt}>{opt}</option>
                          ))}
                        </select>
                      </div>
                    </>
                  ) : (
                    <select
                      value={status[current?.toLowerCase()] || ""}
                      onChange={(e) =>
                        handleStatusChange(job, current?.toLowerCase(), e.target.value)
                      }
                    >
                      <option value="">--‡πÄ‡∏•‡∏∑‡∏≠‡∏Å--</option>
                      {statusOptions[current]?.map?.((opt) => (
                        <option key={opt}>{opt}</option>
                      ))}
                    </select>
                  )}
                </td>

                <td>
                  {Object.entries(status).length > 0 ? (
                    Object.entries(status).map(([key, value]) => (
                      <div key={key}>
                        <strong>{key}</strong>: {value}
                      </div>
                    ))
                  ) : (
                    <span style={{ color: "#888" }}>‚Äì</span>
                  )}
                </td>

                <td>{job.customer || job.Customer || "-"}</td>
                <td>{job.volume || job.Volume || "-"}</td>
                <td>{job.delivery_date || job.DeliveryDate || "-"}</td>
                <td>
                  {(current === "Sales" || current === "Admin") && (
                    <button onClick={() => handleDelete(job.id)}>üóë ‡∏•‡∏ö</button>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}
