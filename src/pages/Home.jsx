import React, { useEffect, useState } from "react";
import {
  getFirestore,
  collection,
  getDocs,
  deleteDoc,
  doc,
} from "firebase/firestore";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import * as XLSX from "xlsx";

const db = getFirestore();
const departments = ["Sales", "Warehouse", "Production", "QC", "Account"];

export default function Home() {
  const [allData, setAllData] = useState([]);
  const [user, setUser] = useState(null);

  useEffect(() => {
    const userInfo = JSON.parse(localStorage.getItem("user"));
    setUser(userInfo);
    fetchData();
  }, []);

  const fetchData = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    setAllData(data);
  };

  const countStatus = (dept) => {
    const counts = { р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Цр╕╢р╕З: 0, р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│: 0, р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з: 0 };
    allData.forEach((item) => {
      const stepIndex = departments.indexOf(item.CurrentStep);
      const deptIndex = departments.indexOf(dept);
      if (stepIndex === deptIndex) {
        counts["р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│"]++;
      } else if (stepIndex > deptIndex) {
        counts["р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з"]++;
      } else {
        counts["р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Цр╕╢р╕З"]++;
      }
    });
    return counts;
  };

  const chartData = departments.map((dept) => ({
    name: dept,
    ...countStatus(dept),
  }));

  const handleExport = () => {
    const exportData = allData.map((item) => ({
      BatchNo: item.BatchNo || "",
      Product: item.Product || "",
      CurrentStep: item.CurrentStep || "",
      Customer: item.Customer || "",
      Volume: item.Volume || "",
      DeliveryDate: item.DeliveryDate || "",
    }));
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Jobs");
    XLSX.writeFile(wb, "production_data.xlsx");
  };

  const handleDelete = async (id) => {
    if (window.confirm("р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕ер╕Ър╕Зр╕▓р╕Щр╕Щр╕╡р╣Й?")) {
      await deleteDoc(doc(db, "production_workflow", id));
      fetchData();
    }
  };

  const renderProgressBar = (step) => {
    return departments.map((dept, index) => {
      const deptIndex = departments.indexOf(dept);
      const stepIndex = departments.indexOf(step);
      let bg = "#d1d5db"; // default: р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Цр╕╢р╕З
      if (stepIndex === deptIndex) bg = "#facc15"; // р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│
      else if (stepIndex > deptIndex) bg = "#4ade80"; // р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з

      return (
        <div
          key={index}
          style={{
            flex: 1,
            backgroundColor: bg,
            margin: "2px",
            height: "25px",
            borderRadius: "4px",
          }}
        />
      );
    });
  };

  return (
    <div style={{ maxWidth: "1000px", margin: "auto", padding: "20px", fontFamily: "Segoe UI, sans-serif" }}>
      <h2 style={{ fontSize: "1.6rem", marginBottom: "20px" }}>ЁЯПа р╕лр╕Щр╣Йр╕▓р╕лр╕ер╕▒р╕Б тАУ р╕ар╕▓р╕Юр╕гр╕зр╕бр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ</h2>

      <h3>ЁЯФ┤ р╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓р╕Вр╕нр╕Зр╕Зр╕▓р╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕Кр╕╕р╕Ф</h3>

      {/* р╕лр╕▒р╕зр╕Хр╕▓р╕гр╕▓р╕З */}
      <div style={{ display: "flex", fontWeight: "bold", marginTop: "10px", marginLeft: "90px" }}>
        {departments.map((dept) => (
          <div key={dept} style={{ flex: 1, textAlign: "center" }}>{dept}</div>
        ))}
      </div>

      {/* Progress Bars */}
      {allData.map((item) => (
        <div key={item.id} style={{ display: "flex", alignItems: "center", marginBottom: "6px" }}>
          <div style={{ width: "90px", fontSize: "14px" }}>ЁЯУД {item.BatchNo}</div>
          <div style={{ display: "flex", flex: 1 }}>{renderProgressBar(item.CurrentStep)}</div>
        </div>
      ))}

      {/* р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕░р╕Зр╕▓р╕Щр╕гр╕▓р╕вр╣Бр╕Ьр╕Щр╕Б */}
      <h3 style={{ marginTop: "40px" }}>ЁЯУК р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕░р╕Зр╕▓р╕Щр╕гр╕▓р╕вр╣Бр╕Ьр╕Щр╕Б</h3>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={chartData} layout="vertical" margin={{ left: 50 }}>
          <XAxis type="number" />
          <YAxis dataKey="name" type="category" />
          <Tooltip />
          <Legend />
          <Bar dataKey="р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Цр╕╢р╕З" stackId="a" fill="#d1d5db" />
          <Bar dataKey="р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│" stackId="a" fill="#facc15" />
          <Bar dataKey="р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з" stackId="a" fill="#4ade80" />
        </BarChart>
      </ResponsiveContainer>

      {/* р╕Ыр╕╕р╣Ир╕б Export + р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф */}
      <div style={{ marginTop: "20px" }}>
        <button
          onClick={handleExport}
          style={{
            padding: "10px 16px",
            backgroundColor: "#16a34a",
            color: "#fff",
            border: "none",
            borderRadius: "5px",
            marginRight: "10px",
            cursor: "pointer",
          }}
        >
          ЁЯУе Export Excel
        </button>

        <button
          onClick={() => setShowDetails(true)}
          style={{
            padding: "10px 16px",
            backgroundColor: "#2563eb",
            color: "#fff",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer",
          }}
        >
          ЁЯФН р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф
        </button>
      </div>

      {/* р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Зр╕▓р╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (р╕Лр╣Ир╕нр╕Щр╣Др╕зр╣Йр╣Др╕Фр╣Йр╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г) */}
      {/* р╣Ар╕Юр╕┤р╣Ир╕бр╕кр╣Ир╕зр╕Щр╕Щр╕╡р╣Йр╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Гр╕лр╣Йр╣Вр╕Кр╕зр╣Мр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Бр╕Ър╕Ъ toggle */}
    </div>
  );
}
